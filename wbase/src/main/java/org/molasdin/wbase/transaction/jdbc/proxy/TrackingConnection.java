/*
 * Copyright 2016 Bersenev Dmitry molasdin@outlook.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.molasdin.wbase.transaction.jdbc.proxy;

import java.sql.*;
import java.util.*;

/**
 * Created by molasdin on 4/26/16.
 */
public class TrackingConnection extends ConnectionDelegate {

    private Set<Statement> statements = new HashSet<>();

    public TrackingConnection(Connection connection) {
        super(connection);
    }

    public Set<Statement> statements(){
        return statements;
    }

    public void closeStatements(){
        Exception result = null;
        for(Statement entry: statements) {
            try {
                if(!entry.isClosed()) {
                    entry.close();
                }
            } catch (SQLException ex) {
                result = ex;
            }
        }
        statements.clear();
        if(result != null) {
            throw new RuntimeException(result);
        }
    }

    private <U extends Statement> U saveStatement(U statement) {
        statements.add(statement);
        return statement;
    }

    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        return saveStatement(super.prepareStatement(sql));
    }
    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return saveStatement(super.prepareStatement(sql, resultSetType, resultSetConcurrency));
    }
    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        return saveStatement(super.prepareStatement(sql, autoGeneratedKeys));
    }
    @Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        return saveStatement(super.prepareStatement(sql, columnIndexes));
    }
    @Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        return saveStatement(super.prepareStatement(sql, columnNames));
    }
    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return saveStatement(super.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability));
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
        return saveStatement(super.createStatement(resultSetType, resultSetConcurrency));
    }
    @Override
    public Statement createStatement() throws SQLException {
        return saveStatement(super.createStatement());
    }
    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return saveStatement(super.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability));
    }

    @Override
    public CallableStatement prepareCall(String sql) throws SQLException {
        return saveStatement(super.prepareCall(sql));
    }
    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return saveStatement(super.prepareCall(sql, resultSetType, resultSetConcurrency));
    }
    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return saveStatement(super.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability));
    }

    @Override
    public void close() throws SQLException {
        closeStatements();
        super.close();
    }

    @Override
    public void commit() throws SQLException {
        closeStatements();
        super.commit();
    }

    @Override
    public void rollback() throws SQLException {
        closeStatements();
        super.rollback();
    }
}
